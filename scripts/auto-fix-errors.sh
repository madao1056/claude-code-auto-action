#!/bin/bash

# Ëá™Âãï„Ç®„É©„Éº‰øÆÊ≠£„Çπ„ÇØ„É™„Éó„Éà

ERROR_TYPE=$1
ERROR_OUTPUT=$2

echo "üîß Ëá™Âãï„Ç®„É©„Éº‰øÆÊ≠£„ÇíÈñãÂßã: $ERROR_TYPE"

case "$ERROR_TYPE" in
  "build_error")
    echo "üì¶ „Éì„É´„Éâ„Ç®„É©„Éº„ÇíÊ§úÂá∫..."
    
    # TypeScript„Ç®„É©„Éº„ÅÆËá™Âãï‰øÆÊ≠£
    if echo "$ERROR_OUTPUT" | grep -q "error TS"; then
      echo "TypeScript„Ç®„É©„Éº„Çí‰øÆÊ≠£‰∏≠..."
      npx tsc --noEmit --pretty false 2>&1 | while read -r line; do
        if [[ $line =~ (.+)\(([0-9]+),([0-9]+)\):\s*error\s*TS[0-9]+:\s*(.+) ]]; then
          file="${BASH_REMATCH[1]}"
          line_num="${BASH_REMATCH[2]}"
          col="${BASH_REMATCH[3]}"
          error="${BASH_REMATCH[4]}"
          
          echo "‰øÆÊ≠£ÂØæË±°: $file:$line_num:$col - $error"
          
          # Claude API„Çí‰Ωø„Å£„Å¶‰øÆÊ≠£
          claude-code --auto-approve --skip-confirmation << EOF
Fix the TypeScript error in $file at line $line_num:
Error: $error

Provide the exact fix without any explanation.
EOF
        fi
      done
    fi
    
    # „É¢„Ç∏„É•„Éº„É´‰∏çË∂≥„Ç®„É©„Éº„ÅÆ‰øÆÊ≠£
    if echo "$ERROR_OUTPUT" | grep -q "Cannot find module\|Module not found"; then
      echo "‰∏çË∂≥„É¢„Ç∏„É•„Éº„É´„Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
      missing_modules=$(echo "$ERROR_OUTPUT" | grep -oE "Cannot find module '([^']+)'|Module not found: Error: Can't resolve '([^']+)'" | grep -oE "'[^']+'")
      
      for module in $missing_modules; do
        module_name=$(echo $module | tr -d "'")
        echo "„Ç§„É≥„Çπ„Éà„Éº„É´: $module_name"
        npm install "$module_name" || npm install --save-dev "$module_name"
      done
    fi
    ;;
    
  "lint_error")
    echo "üîç Lint„Ç®„É©„Éº„ÇíÊ§úÂá∫..."
    
    # ESLint„ÅÆËá™Âãï‰øÆÊ≠£
    if command -v eslint &> /dev/null; then
      echo "ESLint„ÅßËá™Âãï‰øÆÊ≠£„ÇíÂÆüË°å..."
      npx eslint --fix .
    fi
    
    # Prettier„ÅÆËá™Âãï‰øÆÊ≠£
    if command -v prettier &> /dev/null; then
      echo "Prettier„ÅßËá™Âãï‰øÆÊ≠£„ÇíÂÆüË°å..."
      npx prettier --write .
    fi
    ;;
    
  "type_error")
    echo "üéØ Âûã„Ç®„É©„Éº„ÇíÊ§úÂá∫..."
    
    # ÂûãÂÆöÁæ©„ÅÆËá™Âãï„Ç§„É≥„Çπ„Éà„Éº„É´
    if echo "$ERROR_OUTPUT" | grep -q "Could not find a declaration file"; then
      missing_types=$(echo "$ERROR_OUTPUT" | grep -oE "Could not find a declaration file for module '([^']+)'" | grep -oE "'[^']+'")
      
      for module in $missing_types; do
        module_name=$(echo $module | tr -d "'")
        types_package="@types/$module_name"
        echo "ÂûãÂÆöÁæ©„Çí„Ç§„É≥„Çπ„Éà„Éº„É´: $types_package"
        npm install --save-dev "$types_package"
      done
    fi
    ;;
    
  "test_error")
    echo "üß™ „ÉÜ„Çπ„Éà„Ç®„É©„Éº„ÇíÊ§úÂá∫..."
    
    # „Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà„ÅÆÊõ¥Êñ∞
    if echo "$ERROR_OUTPUT" | grep -q "Snapshot"; then
      echo "„Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà„ÇíÊõ¥Êñ∞..."
      npm test -- --updateSnapshot
    fi
    
    # Â§±Êïó„Åó„Åü„ÉÜ„Çπ„Éà„ÅÆËá™Âãï‰øÆÊ≠£
    if command -v jest &> /dev/null; then
      failed_tests=$(echo "$ERROR_OUTPUT" | grep -oE "FAIL\s+(.+\.test\.[tj]sx?)" | awk '{print $2}')
      
      for test_file in $failed_tests; do
        echo "„ÉÜ„Çπ„Éà„Çí‰øÆÊ≠£: $test_file"
        claude-code --auto-approve --skip-confirmation << EOF
Fix the failing test in $test_file based on this error output:
$ERROR_OUTPUT

Update the test to pass while maintaining the intended behavior.
EOF
      done
    fi
    ;;
    
  *)
    echo "‚ö†Ô∏è Êú™Áü•„ÅÆ„Ç®„É©„Éº„Çø„Ç§„Éó: $ERROR_TYPE"
    exit 1
    ;;
esac

# ‰øÆÊ≠£Âæå„ÅÆÂÜçÂÆüË°å
echo "üîÑ ‰øÆÊ≠£„ÇíÊ§úË®º‰∏≠..."
case "$ERROR_TYPE" in
  "build_error")
    npm run build
    ;;
  "lint_error")
    npm run lint
    ;;
  "type_error")
    npm run typecheck || npx tsc --noEmit
    ;;
  "test_error")
    npm test
    ;;
esac

if [ $? -eq 0 ]; then
  echo "‚úÖ „Ç®„É©„Éº„ÅåÊ≠£Â∏∏„Å´‰øÆÊ≠£„Åï„Çå„Åæ„Åó„ÅüÔºÅ"
  
  # Ëá™Âãï„Ç≥„Éü„ÉÉ„ÉàÔºàË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
  if [ "$AUTO_COMMIT" = "true" ]; then
    git add -A
    git commit -m "fix: Ëá™Âãï„Ç®„É©„Éº‰øÆÊ≠£ - $ERROR_TYPE

- $ERROR_TYPE „ÇíÊ§úÂá∫„Åó„Å¶Ëá™Âãï‰øÆÊ≠£
- ÂΩ±Èüø„ÇíÂèó„Åë„Åü„Éï„Ç°„Ç§„É´„ÇíÊõ¥Êñ∞
- „ÉÜ„Çπ„Éà„Åä„Çà„Å≥„Éì„É´„Éâ„ÅåÊàêÂäü

ü§ñ Generated with Claude Code Auto-Fix"
  fi
else
  echo "‚ùå „Ç®„É©„Éº„ÅÆ‰øÆÊ≠£„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
  exit 1
fi